#=================================================================================
# In Status
#=================================================================================

Below the function:

GameData::Status.register({
  :id        => :FROZEN,
  :id_number => 5,
  :name      => _INTL("Frozen"),
  :animation => "Frozen"
})

Paste this:

# Pokémon Legends: Arceus
GameData::Status.register({
  :id        => :FROSTBITE,
  :id_number => 6,
  :name      => _INTL("Frostbitten"),
  :animation => "Frozen"
})
# Pokémon Legends: Arceus
GameData::Status.register({
  :id        => :DROWSY,
  :id_number => 7,
  :name      => _INTL("Drowsy"),
  :animation => "Sleep"
})

#=================================================================================
# In Battler_Statuses
#=================================================================================

In the function:

  def pbCanInflictStatus?(newStatus,user,showMessages,move=nil,ignoreStatus=false)

Below the line:

        when :FROZEN    then msg = _INTL("{1} is already frozen solid!", pbThis)

Paste this:

        when :FROSTBITE then msg = _INTL("{1} is already frostbitten!", pbThis)
        when :DROWSY    then msg = _INTL("{1} is already drowsy!", pbThis)

Below the lines:

    when :FROZEN
      hasImmuneType |= pbHasType?(:ICE)

Paste this:

    when :FROSTBITE
      hasImmuneType |= pbHasType?(:ICE)
      hasImmuneType |= pbHasType?(:FIRE)

Below the line:

          when :FROZEN    then msg = _INTL("{1} cannot be frozen solid!", pbThis)

Paste this:

          when :FROSTBITE then msg = _INTL("{1} cannot be frostbitten!", pbThis)
          when :DROWSY    then msg = _INTL("{1} resists drowsiness!", pbThis)

Below the line:

          when :FROZEN
            msg = _INTL("{1} cannot be frozen solid because of {2}'s {3}!",
               pbThis,immAlly.pbThis(true),immAlly.abilityName)

Paste this:

          when :FROSTBITE
            msg = _INTL("{1} cannot be frostbitten because of {2}'s {3}!",
               pbThis,immAlly.pbThis(true),immAlly.abilityName)
          when :DROWSY
            msg = _INTL("{1} resists drowsiness because of {2}'s {3}!",
               pbThis,immAlly.pbThis(true),immAlly.abilityName)

Below the line:

          when :FROZEN    then msg = _INTL("{1}'s {2} prevents freezing!", pbThis, abilityName)

Paste this:

          when :FROSTBITE then msg = _INTL("{1}'s {2} prevents frostbites!", pbThis,abilityName)
          when :DROWSY    then msg = _INTL("{1}'s {2} prevents drowsiness!", pbThis,abilityName)

In the function:

  def pbInflictStatus(newStatus,newStatusCount=0,msg=nil,user=nil)

Below the line:

      when :FROZEN
        @battle.pbDisplay(_INTL("{1} was frozen solid!", pbThis))

Paste this

      when :FROSTBITE
        @battle.pbDisplay(_INTL("{1} was frostbitten!", pbThis))
      when :DROWSY
        @battle.pbDisplay(_INTL("{1} was drowsy!", pbThis))

In the function:

  def pbContinueStatus

Below the line:

    when :FROZEN
      @battle.pbDisplay(_INTL("{1} is frozen solid!", pbThis))

Paste this:

    when :FROSTBITE
      @battle.pbDisplay(_INTL("{1} was hurt by its frostbite!", pbThis))
    when :DROWSY
      @battle.pbDisplay(_INTL("{1} is drowsy.", pbThis))

In the function:

 def pbCureStatus(showMessages=true)

Below the line:

      when :FROZEN    then @battle.pbDisplay(_INTL("{1} thawed out!", pbThis))

Paste this:

      when :FROSTBITE then @battle.pbDisplay(_INTL("{1}'s frostbite was healed!", pbThis))
      when :DROWSY    then @battle.pbDisplay(_INTL("{1} is no longer drowsy!", pbThis))

#=================================================================================
# In Battler_UseMove
#=================================================================================

In the function:

  def pbUseMove(choice,specialUsage=false)

ABOVE the lines:

    # Self-thawing due to the move
    if user.status == :FROZEN && move.thawsUser?
      user.pbCureStatus(false)
      @battle.pbDisplay(_INTL("{1} melted the ice!",user.pbThis))

Paste this:

    # Pokémon Legends Arceus: Cures Drowsy.
    if user.status == :DROWSY && move.undrowsesUser?
      user.pbCureStatus(false)
      @battle.pbDisplay(_INTL("{1} is no longer drowsy!",user.pbThis))
    end
    # Pokémon Legends Arceus: Cures Frostbite.
    if user.status == :FROSTBITE && move.thawsUser?
      user.pbCureStatus(false)
      @battle.pbDisplay(_INTL("{1} cures its frostbite!",user.pbThis))
    end

#=================================================================================
# In Battler_UseMove_SuccessChecks
#=================================================================================

Below the lines:

    # Paralysis
    if @status == :PARALYSIS
      if @battle.pbRandom(100)<25
        pbContinueStatus
        @lastMoveFailed = true
        return false
      end
    end

Paste this:

    # Drowsy
    if @status == :DROWSY
      if @battle.pbRandom(100)<25
        pbContinueStatus
        @lastMoveFailed = true
        return false
      end
    end

#=================================================================================
# In Move_Usage_Calculations
#=================================================================================

Below the lines:

    # Burn
    if user.status == :BURN && physicalMove? && damageReducedByBurn? &&
       !user.hasActiveAbility?(:GUTS)
      multipliers[:final_damage_multiplier] /= 2
    end

Paste this:

    # Frostbite (Pokémon Legends: Arceus)
    if user.status == :FROSTBITE && specialMove? && damageReducedByFrostbite? &&
       !user.hasActiveAbility?(:GUTS)
      multipliers[:final_damage_multiplier] /= 2
    end
    # Drowsy (Pokémon Legends: Arceus)
    if target.status == :DROWSY
      multipliers[:final_damage_multiplier] /= 1.25 # I don't know the exact value.
    end

Below the lines:

    when :Sandstorm
      if target.pbHasType?(:ROCK) && specialMove? && @function != "122"   # Psyshock
        multipliers[:defense_multiplier] *= 1.5
      end
    end

Paste this:

   # Pokémon Legends: Arceus - Victory Dance
    if user.effects[PBEffects::VictoryDance]
      multipliers[:final_damage_multiplier] *= 1.5 
    end

#=================================================================================
# In Battle_Phase_EndOfRound
#=================================================================================

Below the lines:

    # Damage from burn
    priority.each do |b|
      next if b.status != :BURN || !b.takesIndirectDamage?
      oldHP = b.hp
      dmg = (Settings::MECHANICS_GENERATION >= 7) ? b.totalhp/16 : b.totalhp/8
      dmg = (dmg/2.0).round if b.hasActiveAbility?(:HEATPROOF)
      b.pbContinueStatus { b.pbReduceHP(dmg,false) }
      b.pbItemHPHealCheck
      b.pbAbilitiesOnDamageTaken(oldHP)
      b.pbFaint if b.fainted?
    end

Paste this:

    # Damage from frostbite (Pokémon Legends: Arceus)
    priority.each do |b|
      next if b.status != :FROSTBITE || !b.takesIndirectDamage?
      oldHP = b.hp
      dmg = (Settings::MECHANICS_GENERATION >= 7) ? b.totalhp/16 : b.totalhp/8
      dmg = (dmg/2.0).round if b.hasActiveAbility?(:MAGMAARMOR)
      b.pbContinueStatus { b.pbReduceHP(dmg,false) }
      b.pbItemHPHealCheck
      b.pbAbilitiesOnDamageTaken(oldHP)
      b.pbFaint if b.fainted?
    end

ABOVE the comment:

# Damage from Hyper Mode (Shadow Pokémon)

Paste this:

    # Pokémon Legends: Arceus
    # Stone Axe Splinters
    priority.each do |b|
      b.effects[PBEffects::Splinters] -= 1
      next if b.effects[PBEffects::Splinters] < 0
      next if !b.takesIndirectDamage?
      pbCommonAnimation("StoneAxe",b) #placeholder, make your own animation
      oldHP = b.hp
      b.pbReduceHP(b.totalhp/8)
      pbDisplay(_INTL("The scattered splinters hurt {1}!",b.pbThis(true)))
      b.pbItemHPHealCheck
      b.pbAbilitiesOnDamageTaken(oldHP)
      b.pbFaint if b.fainted?
    end

#=================================================================================
# In AI_Move_EffectScores
#=================================================================================

Find:

    when "018"

Then replace the line:

      when :BURN, :PARALYSIS

With this:

      when :BURN, :PARALYSIS, :FROSTBITE, :DROWSY

Find:

    when "07D"

Then replace the lines:

      score -= 20 if target.status == :SLEEP &&   # Will cure status
                     target.statusCount > 1

With this:

      score -= 20 if target.status == :SLEEP || 
                     target.status == :DROWSY &&   # Will cure status
                     target.statusCount > 1

Find:

    when "110"

Then below the line:

        score += 80 if user.pbOwnSide.effects[PBEffects::StealthRock]

Paste this:

        score += 80 if user.pbOwnSide.effects[PBEffects::StoneAxe]>-1
        score += 80 if user.pbOwnSide.effects[PBEffects::CeaselessEdge]>-1

Find:

    when "15A"

Then replace:

      if target.opposes?(user)
        score -= 40 if target.status == :BURN
      else
        score += 40 if target.status == :BURN
      end

With this:

      if target.opposes?(user)
        score -= 40 if target.status == :BURN ||
        target.status == :FROSTBITE
      else
        score += 40 if target.status == :BURN ||
        target.status == :FROSTBITE
      end

Gen 8 Project uses its separate plugin and does not hardcode its data into
AI_Move_EffectScores, so this step is something entirely different. As
usual, proceed with caution.

NOTE: The first number on the new list starts with 200 to prevent overlapse.
      Edit this section with extreme caution if you are not happy with what is
      provided.

Below the section:

    #---------------------------------------------------------------------------
    when "175"
      score += 30 if target.effects[PBEffects::Minimize]
    #---------------------------------------------------------------------------

Paste this:

    #---------------------------------------------------------------------------
    when "200" # Dire Claw
      score += 30 if target.status == :NONE
    #---------------------------------------------------------------------------
    when "201" # Power Shift
      if skill>=PBTrainerAI.mediumSkill
        aatk = pbRoughStat(user,:ATTACK,skill)
        adef = pbRoughStat(user,:DEFENSE,skill)
        aspatk = pbRoughStat(user,:SPECIAL_ATTACK,skill)
        aspdef = pbRoughStat(user,:SPECIAL_DEFENSE,skill)
        if (aatk==adef && aspatk==aspdef) ||
           user.effects[PBEffects::PowerShift]   # No flip-flopping
          score -= 90
        elsif adef>aatk || aspdef>aspatk  # Prefer a higher Attack
          score += 30
        else
          score -= 30
        end
      else
        score -= 30
      end
    #---------------------------------------------------------------------------
    when "202" # Stone Axe
      score += 60 if target.effects[PBEffects::StoneAxe]<0
    #---------------------------------------------------------------------------
    when "203" # Ceaseless Edge
      score += 60 if target.effects[PBEffects::CeaselessEdge]<0
    #---------------------------------------------------------------------------
    when "204" # Springtide Storm
      if move.statusMove?
        if user.statStageAtMax?(:DEFENSE)
          score -= 90
        else
          score += 40 if user.turnCount==0
          score -= user.stages[:DEFENSE]*20
        end
      else
        score += 10 if user.turnCount==0
        score += 20 if user.stages[:DEFENSE]<0
      end
    #---------------------------------------------------------------------------
    when "205" # Mystical Power
      if skill>=PBTrainerAI.mediumSkill
        aatk = pbRoughStat(user,:ATTACK,skill)
        adef = pbRoughStat(user,:DEFENSE,skill)
        aspatk = pbRoughStat(user,:SPECIAL_ATTACK,skill)
        aspdef = pbRoughStat(user,:SPECIAL_DEFENSE,skill)
        if aatk + aspatk >= adef + aspdef
          if user.statStageAtMax?(:ATTACK) && user.statStageAtMax?(:SPECIAL_ATTACK)
            score -= 90
          else
            score += 40 if user.turnCount==0
            score -= user.stages[:ATTACK]*20
            score -= user.stages[:SPECIAL_ATTACK]*20
          end
        else 
          if user.statStageAtMax?(:DEFENSE) && user.statStageAtMax?(:SPECIAL_DEFENSE)
            score -= 90
          else
            score += 40 if user.turnCount==0
            score -= user.stages[:DEFENSE]*20
            score -= user.stages[:SPECIAL_DEFENSE]*20
          end
        end 
      else
        score -= 30
      end
    #---------------------------------------------------------------------------
    when "206" # Wave Crash
      score -= 20
    #---------------------------------------------------------------------------
    when "207" # Chloroblast
      score -= 20
    #---------------------------------------------------------------------------
    when "208" # Victory Dance
      if skill>=PBTrainerAI.mediumSkill
        if user.statStageAtMax?(:DEFENSE) && user.statStageAtMax?(:SPECIAL_DEFENSE) &&
          user.statStageAtMax?(:ATTACK) && user.statStageAtMax?(:SPECIAL_ATTACK)
          score -= 90
        else
          score += 40 if user.turnCount==0 || !user.effects[PBEffects::VictoryDance]
          score -= user.stages[:DEFENSE]*10
          score -= user.stages[:SPECIAL_DEFENSE]*10
          score -= user.stages[:ATTACK]*10
          score -= user.stages[:SPECIAL_ATTACK]*10
        end
      else
        score -= 30
      end
    #---------------------------------------------------------------------------
    when "209" # Barb Barrage
      score += 30 if target.status != :NONE
    #---------------------------------------------------------------------------
    when "210" # Bitter Malice
      score += 30 if target.status != :NONE
    #---------------------------------------------------------------------------
    when "211" # Infernal Parade
      score += 30 if target.status != :NONE
    #---------------------------------------------------------------------------
    when "212" # Triple Arrows
      score += 30 if user.effects[PBEffects::FocusEnergy]<2
      score += user.stages[:DEFENSE]*10
    #---------------------------------------------------------------------------
    when "213" # Bleakwind Storm
      if target.pbCanFrostbite?(user,false)
        score += 30
        if skill>=PBTrainerAI.highSkill
          score -= 40 if target.hasActiveAbility?([:GUTS,:MARVELSCALE,:QUICKFEET])
        end
      else
        if skill>=PBTrainerAI.mediumSkill
          score -= 90 if move.statusMove?
        end
      end
    #---------------------------------------------------------------------------
    when "214" # Lunar Blessing
      if user.hp==user.totalhp || (skill>=PBTrainerAI.mediumSkill && !user.canHeal?)
        score -= 90
      else
        score += 50
        score -= user.hp*100/user.totalhp
      end
      case user.status
      when :POISON
        score += 40
        if skill>=PBTrainerAI.mediumSkill
          if user.hp<user.totalhp/8
            score += 60
          elsif skill>=PBTrainerAI.highSkill &&
             user.hp<(user.effects[PBEffects::Toxic]+1)*user.totalhp/16
            score += 60
          end
        end
      when :BURN, :PARALYSIS, :FROSTBITE, :DROWSY
        score += 40
      else
        score -= 90
      end
    #---------------------------------------------------------------------------
    when "215" # Take Heart
      if skill>=PBTrainerAI.mediumSkill
        if user.statStageAtMax?(:DEFENSE) && user.statStageAtMax?(:SPECIAL_DEFENSE) &&
          user.statStageAtMax?(:ATTACK) && user.statStageAtMax?(:SPECIAL_ATTACK)
          score -= 90
        else
          score += 40 if user.turnCount==0 
          score -= user.stages[:DEFENSE]*10
          score -= user.stages[:SPECIAL_DEFENSE]*10
          score -= user.stages[:ATTACK]*10
          score -= user.stages[:SPECIAL_ATTACK]*10
        end
      else
        score -= 30
      end
      case user.status
      when :POISON
        score += 40
        if skill>=PBTrainerAI.mediumSkill
          if user.hp<user.totalhp/8
            score += 60
          elsif skill>=PBTrainerAI.highSkill &&
             user.hp<(user.effects[PBEffects::Toxic]+1)*user.totalhp/16
            score += 60
          end
        end
      when :BURN, :PARALYSIS, :FROSTBITE, :DROWSY
        score += 40
      else
        score -= 90
      end
    #---------------------------------------------------------------------------

#=================================================================================
# In AI_Move_Utilities
#=================================================================================

Below the line:

    # Burn
    if skill>=PBTrainerAI.highSkill
      if user.status == :BURN && move.physicalMove?(type) &&
         !user.hasActiveAbility?(:GUTS) &&
         !(Settings::MECHANICS_GENERATION >= 6 && move.function == "07E")   # Facade
        multipliers[:final_damage_multiplier] /= 2
      end
    end

Paste this:

    # Frostbite (Pokémon Legends: Arceus)
    if skill>=PBTrainerAI.highSkill
      if user.status == :FROSTBITE && move.specialMove?(type) &&
         !user.hasActiveAbility?(:GUTS) &&
         !(Settings::MECHANICS_GENERATION >= 6 && move.function=="07E") # Facade
        multipliers[:final_damage_multiplier] /= 2
      end
    end

#=================================================================================
# In PokeBattle_BattlePalace
#=================================================================================

In the function:

  def pbEnemyShouldWithdraw?(idxBattler)

Replace the lines:

      when :SLEEP, :FROZEN
        factor += 20
      when :POISON, :BURN
        factor += 10
      when :PARALYSIS
        factor += 15
      end

With this:

      when :SLEEP, :FROZEN
        factor += 20
      when :POISON, :BURN, :FROSTBITE
        factor += 10
      when :PARALYSIS, :DROWSY
        factor += 15
      end

#=================================================================================
# In Item_Effects
#=================================================================================

In the function:

ItemHandlers::UseOnPokemon.add(:REVEALGLASS,proc { |item,pkmn,scene|

Replace the lines:

  if !pkmn.isSpecies?(:TORNADUS) &&
     !pkmn.isSpecies?(:THUNDURUS) &&
     !pkmn.isSpecies?(:LANDORUS)

With this:

  if !pkmn.isSpecies?(:TORNADUS) &&
     !pkmn.isSpecies?(:THUNDURUS) &&
     !pkmn.isSpecies?(:LANDORUS) &&
     !pkmn.isSpecies?(:ENAMORUS)

Below the ENTIRE section of:

ItemHandlers::UseOnPokemon.add(:REINSOFUNITY,proc { |item,pkmn,scene|

Paste this:

ItemHandlers::UseOnPokemon.add(:ADAMANTCRYSTAL,proc { |item,pkmn,scene|
  if !pkmn.isSpecies?(:DIALGA)
    scene.pbDisplay(_INTL("It had no effect."))
    next false
  end
  if pkmn.fainted?
    scene.pbDisplay(_INTL("This can't be used on the fainted Pokémon."))
    next false
  end
  newForm = (pkmn.form==0) ? 1 : 0
  pkmn.setForm(newForm) {
    scene.pbRefresh
    scene.pbDisplay(_INTL("{1} changed Forme!",pkmn.name))
  }
  next true
})

ItemHandlers::UseOnPokemon.add(:LUSTROUSGLOBE,proc { |item,pkmn,scene|
  if !pkmn.isSpecies?(:PALKIA)
    scene.pbDisplay(_INTL("It had no effect."))
    next false
  end
  if pkmn.fainted?
    scene.pbDisplay(_INTL("This can't be used on the fainted Pokémon."))
    next false
  end
  newForm = (pkmn.form==0) ? 1 : 0
  pkmn.setForm(newForm) {
    scene.pbRefresh
    scene.pbDisplay(_INTL("{1} changed Forme!",pkmn.name))
  }
  next true
})
#=================================================================================
# In FormHandlers
#=================================================================================

Below the section:

#===============================================================================
# Galarian forms
#===============================================================================

# These species don't have visually different Galarian forms, but they need to
# evolve into different forms depending on the location where they evolved.
MultipleForms.register(:KOFFING,{
  "getForm" => proc { |pkmn|
    next if pkmn.form_simple >= 2
    if $game_map
      map_metadata = GameData::MapMetadata.try_get($game_map.map_id)
      next 1 if map_metadata && map_metadata.town_map_position &&
                map_metadata.town_map_position[0] == 1   # Tiall region
    end
    next 0
  }
})

MultipleForms.copy(:KOFFING,:MIMEJR)


Paste this:

#===============================================================================
# Hisuian forms
#===============================================================================

# These species don't have visually different Hisuian forms, but they need to
# evolve into different forms depending on the location where they evolved.
MultipleForms.register(:QUILAVA,{
  "getForm" => proc { |pkmn|
    next if pkmn.form_simple >= 2
    if $game_map
      map_metadata = GameData::MapMetadata.try_get($game_map.map_id)
      next 1 if map_metadata && map_metadata.town_map_position &&
                map_metadata.town_map_position[0] == 1   # Tiall region
    end
    next 0
  }
})

MultipleForms.copy(:QUILAVA,:DEWOTT,:PETILIL,:RUFFLET,:GOOMY,:BERGMITE,:DARTRIX)


#=================================================================================
# IF AND ONLY IF you are using Ludicious's ZUD Plugin for v19.1
#
# In 01_Raid_Battle inside the ZUD Plugin Scripts/[006] Max Raids folder
#=================================================================================

In the function:

    when cheerHealParty

Below the line:

          when :FROZEN;    pbDisplay(_INTL("{1} thawed out!",b.pbThis))

Paste this:

          when :FROSTBITE; pbDisplay(_INTL("{1} was healed of its frostbite!",b.pbThis))
          when :DROWSY;    pbDisplay(_INTL("{1} was pull out of drowsiness!",b.pbThis))

#=================================================================================
# IF AND ONLY IF you are using Golisopod User's Following Pokemon EX for v19.1
#
# In 002_Dialogue_Specific inside the 000_Config folder
#=================================================================================\

In the function:

Events.OnTalkToFollower += proc {|pkmn,x,y,random_val|

Below the lines:

  when :PARALYSIS
    $scene.spriteset.addUserAnimation(FollowerSettings::Emo_Normal,x,y)
    pbMoveRoute($game_player,[PBMoveRoute::Wait,20])
    pbMessage(_INTL("{1} is standing still and twitching.",pkmn.name))

Paste this:

  when :FROSTBITE
    $scene.spriteset.addUserAnimation(FollowerSettings::Emo_Normal,x,y)
    pbMoveRoute($game_player,[PBMoveRoute::Wait,20])
    pbMessage(_INTL("{1}'s frostbite looks painful.",pkmn.name))
  when :DROWSY
    $scene.spriteset.addUserAnimation(FollowerSettings::Emo_Normal,x,y)
    pbMoveRoute($game_player,[PBMoveRoute::Wait,20])
    pbMessage(_INTL("{1} is drowsy...",pkmn.name))

